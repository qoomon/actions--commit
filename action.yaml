name: 'Commit'
description: 'GitHub Action to create signed commits from within a GitHub Action workflow'
author: 'qoomon'
branding:
  icon: git-commit
  color: black
inputs:
  user:
    required: true
    default: 'bot'
runs:
  using: "composite"
  steps:
    - name: Set git user config
      shell: bash
      env:
        INPUT_USER: ${{ inputs.user }}
      run: |
        case "$INPUT_USER" in
        
          bot)
            git config --global user.name 'github-actions[bot]'
            git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
            ;;
            
          actor)
            git config --global user.name "${GITHUB_ACTOR}"
            git config --global user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"
            ;;

          commit)
            git config user.name "$(git log -n 1 --pretty=format:%an)"
            git config user.email "$(git log -n 1 --pretty=format:%ae)"
            ;;
            
          *)
            echo "ERROR: unexpected user input '$INPUT_USER'"
            exit 1
            ;;
            
        esac

        printf "user.name:  " && git config user.name
        printf "user.email: " && git config user.email
        
    - name: Create signed commit
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs')
          
          async function execCommand(command) {
              const result = {stdout: '', stderr: ''}
              await exec.exec(command, null, {
                  listeners: {
                      stdout(data) {
                          result.stdout += data.toString()
                      },
                      stderr(data) {
                          result.stderr += data.toString()
                      },
                  },
              })
              return result
          }
          
          const repositoryNameWithOwner = await execCommand('git remote get-url --push origin')
              .then(({stdout}) => stdout.trim().replace(/.*?([^/:]+\/[^/]+?)(?:\.git)?$/, '$1'))
          
          const branchName = await execCommand('git branch --show-current')
              .then(({stdout}) => stdout.trim())
          
          const expectedHeadOid = await execCommand('git rev-parse HEAD')
              .then(({stdout}) => stdout.trim())
          
          const fileChanges = {
              additions: await execCommand('git diff --cached --name-only --diff-filter=AM')
                  .then(({stdout}) => stdout.split('\n').filter(path => path.trim() !== ''))
                  .then((paths) => paths.map((path) => ({
                      path,
                      contents: fs.readFileSync(path).toString('base64'),
                  }))),
              deletions: await execCommand('git diff --cached --name-only --diff-filter=D')
                  .then(({stdout}) => stdout.split('\n').filter(path => path.trim() !== ''))
                  .then((paths) => paths.map((path) => ({path}))),
          }
          
          const message = {
              headline: 'Sign me!',
              body: 'This is a commit message',
          }
          
          const input = {
              branch: {
                  repositoryNameWithOwner,
                  branchName,
              },
              expectedHeadOid,
              fileChanges,
              message,
          }
          
          console.info('CreateCommitOnBranchInput:', JSON.stringify({
              ...input,
              fileChanges: {
                  additions: input.fileChanges.additions.map(({path}) => path),
                  deletions: input.fileChanges.deletions,
              }
          }, null, 2))
          
          const commit = await github.graphql(`mutation ($input: CreateCommitOnBranchInput!) {
              createCommitOnBranch(input: $input) {
                  commit {
                      oid
                  }
              }
          }`, {input})
          
          console.log('Commit:', commit)  

          await execCommand(`git pull origin ${branchName}`)
      
